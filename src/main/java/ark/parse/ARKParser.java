
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package ark.parse;

import java.util.ArrayList;
import java.util.List;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ARKParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ARKSymbol.class;
}

  /** Default constructor. */
  @SuppressWarnings("deprecation")
public ARKParser() {super();}

  /** Constructor which sets the default scanner. */
  @SuppressWarnings("deprecation")
public ARKParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ARKParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\007\000\002\006\004\000\002\006\002" +
    "\000\002\004\005\000\002\004\002\000\002\005\005\000" +
    "\002\005\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\016\011\000\002\016" +
    "\007\000\002\016\007\000\002\016\005\000\002\015\006" +
    "\000\002\015\011\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\013\005\000\002" +
    "\014\005\000\002\014\002\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\uffff\020\ufffc\001\002\000\004\002" +
    "\105\001\002\000\004\020\013\001\002\000\004\006\011" +
    "\001\002\000\004\020\ufffc\001\002\000\004\020\ufffd\001" +
    "\002\000\010\002\uffff\017\uffff\020\ufffc\001\002\000\006" +
    "\002\000\017\000\001\002\000\004\020\014\001\002\000" +
    "\004\005\015\001\002\000\012\007\017\012\027\014\016" +
    "\020\022\001\002\000\004\020\103\001\002\000\004\016" +
    "\100\001\002\000\004\006\ufffe\001\002\000\012\004\ufff6" +
    "\006\ufff6\010\073\011\041\001\002\000\010\004\uffe4\006" +
    "\uffe4\012\050\001\002\000\010\004\uffe5\006\uffe5\011\045" +
    "\001\002\000\006\004\ufff5\006\ufff5\001\002\000\006\004" +
    "\ufff7\006\ufff7\001\002\000\006\004\ufff4\006\ufff4\001\002" +
    "\000\012\007\017\013\uffe7\014\016\020\022\001\002\000" +
    "\006\011\041\013\040\001\002\000\004\013\037\001\002" +
    "\000\004\004\033\001\002\000\012\007\017\013\uffe7\014" +
    "\016\020\035\001\002\000\004\004\uffe5\001\002\000\004" +
    "\004\uffe4\001\002\000\004\013\uffe8\001\002\000\006\004" +
    "\uffe9\006\uffe9\001\002\000\004\010\065\001\002\000\006" +
    "\007\017\020\043\001\002\000\014\004\uffed\006\uffed\010" +
    "\uffed\011\041\013\uffed\001\002\000\004\012\050\001\002" +
    "\000\014\004\uffec\006\uffec\010\uffec\011\045\013\uffec\001" +
    "\002\000\006\007\017\020\043\001\002\000\014\004\uffeb" +
    "\006\uffeb\010\uffeb\011\041\013\uffeb\001\002\000\014\004" +
    "\uffea\006\uffea\010\uffea\011\045\013\uffea\001\002\000\012" +
    "\007\017\013\ufffa\014\016\020\052\001\002\000\004\013" +
    "\061\001\002\000\006\004\uffe4\005\057\001\002\000\004" +
    "\004\ufff8\001\002\000\004\004\055\001\002\000\012\007" +
    "\017\013\ufffa\014\016\020\052\001\002\000\004\013\ufffb" +
    "\001\002\000\012\007\017\012\027\014\016\020\022\001" +
    "\002\000\004\004\ufff9\001\002\000\016\004\uffef\006\uffef" +
    "\010\uffef\011\uffef\013\uffef\016\062\001\002\000\006\017" +
    "\uffff\020\ufffc\001\002\000\004\017\064\001\002\000\014" +
    "\004\uffee\006\uffee\010\uffee\011\uffee\013\uffee\001\002\000" +
    "\010\007\017\012\070\020\043\001\002\000\010\004\ufff2" +
    "\006\ufff2\011\041\001\002\000\004\011\045\001\002\000" +
    "\006\007\017\020\043\001\002\000\006\011\041\013\072" +
    "\001\002\000\006\004\ufff3\006\ufff3\001\002\000\010\007" +
    "\017\012\075\020\043\001\002\000\010\004\ufff0\006\ufff0" +
    "\011\041\001\002\000\006\007\017\020\043\001\002\000" +
    "\006\011\041\013\077\001\002\000\006\004\ufff1\006\ufff1" +
    "\001\002\000\004\020\101\001\002\000\004\017\102\001" +
    "\002\000\014\004\uffe3\006\uffe3\010\uffe3\011\uffe3\013\uffe3" +
    "\001\002\000\004\015\104\001\002\000\006\004\uffe6\006" +
    "\uffe6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\012\002\003\003\005\006\004\007\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\007\007\006\001\001\000\002\001\001\000" +
    "\012\002\011\003\005\006\004\007\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\017\011\025\012\022\013\023\015\020\016\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\031\012\022\014\030\015\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\031\012" +
    "\033\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\043\015\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\046\015\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\050" +
    "\005\053\011\052\012\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\055\005\053\011\052\012\033\001\001\000\002\001" +
    "\001\000\016\010\057\011\025\012\022\013\023\015\020" +
    "\016\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\062\003\005\006\004\007\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\066\015\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\066" +
    "\015\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\066\015\073\001\001\000\002\001\001\000\006" +
    "\012\066\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ARKParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ARKParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ARKParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"unchecked", "unused"})
class CUP$ARKParser$actions {
  private final ARKParser parser;

  /** Constructor */
  CUP$ARKParser$actions(ARKParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ARKParser$do_action_part00000000(
    int                        CUP$ARKParser$act_num,
    java_cup.runtime.lr_parser CUP$ARKParser$parser,
    java.util.Stack            CUP$ARKParser$stack,
    int                        CUP$ARKParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ARKParser$result;

      /* select the action based on the action number */
      switch (CUP$ARKParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= assignmentTypedList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		AssignmentList start_val = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		RESULT = start_val;
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ARKParser$parser.done_parsing();
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // assignmentTypedList ::= assignmentTyped SEMI assignmentTypedList 
            {
              AssignmentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		AssignmentList al = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 al.add(a); RESULT = al; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentTypedList",0, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assignmentTypedList ::= 
            {
              AssignmentList RESULT =null;
		 RESULT = new AssignmentList(); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentTypedList",0, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assignmentTyped ::= assignmentTypedModifierList STRING STRING EQUALS obj 
            {
              Assignment RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).right;
		List<String> ml = (List<String>)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Assignment.assignmentTyped(ml,t,n,o); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentTyped",1, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // assignmentTypedModifierList ::= assignmentTypedModifier assignmentTypedModifierList 
            {
              List<String> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		List<String> ml = (List<String>)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 ml.add(m); RESULT = ml; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentTypedModifierList",4, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignmentTypedModifierList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentTypedModifierList",4, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignmentUntypedList ::= assignmentUntyped COMMA assignmentUntypedList 
            {
              AssignmentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		AssignmentList al = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 al.add(a); RESULT = al; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentUntypedList",2, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignmentUntypedList ::= 
            {
              AssignmentList RESULT =null;
		 RESULT = new AssignmentList(); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentUntypedList",2, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignmentUntyped ::= STRING EQUALS obj 
            {
              Assignment RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Assignment.assignmentUntyped(n,o); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentUntyped",3, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignmentUntyped ::= value 
            {
              Assignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Assignment.assignmentUntyped(v); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("assignmentUntyped",3, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // obj ::= rule 
            {
              Obj RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Rule r = (Obj.Rule)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("obj",6, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // obj ::= function 
            {
              Obj RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Function f = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("obj",6, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // obj ::= array 
            {
              Obj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Array a = (Obj.Array)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = a; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("obj",6, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // obj ::= value 
            {
              Obj RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("obj",6, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rule ::= LPAREN function RPAREN RIGHT_ARROW LPAREN function RPAREN 
            {
              Obj.Rule RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-5)).right;
		Obj.Function f1 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		Obj.Function f2 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.rule(f1, f2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("rule",12, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-6)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rule ::= LPAREN function RPAREN RIGHT_ARROW function 
            {
              Obj.Rule RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).right;
		Obj.Function f1 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Function f2 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.rule(f1, f2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("rule",12, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rule ::= function RIGHT_ARROW LPAREN function RPAREN 
            {
              Obj.Rule RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).right;
		Obj.Function f1 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		Obj.Function f2 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.rule(f1, f2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("rule",12, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rule ::= function RIGHT_ARROW function 
            {
              Obj.Rule RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Function f1 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Function f2 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.rule(f1, f2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("rule",12, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= STRING LPAREN assignmentUntypedList RPAREN 
            {
              Obj.Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		AssignmentList al = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.function(n,al); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= STRING LPAREN assignmentUntypedList RPAREN LCURLY_BRACE assignmentTypedList RCURLY_BRACE 
            {
              Obj.Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-6)).value;
		int aulleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).left;
		int aulright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).right;
		AssignmentList aul = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-4)).value;
		int atlleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int atlright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		AssignmentList atl = (AssignmentList)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.function(n,aul,atl); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-6)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= function COMP function 
            {
              Obj.Function RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Function f1 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Function f2 = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.functionComposition(f1, f2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= function COMP curlyBracedValue 
            {
              Obj.Function RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Function f = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.functionComposition(f, v); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= curlyBracedValue COMP function 
            {
              Obj.Function RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Function f = (Obj.Function)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.functionComposition(f, v); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= curlyBracedValue COMP curlyBracedValue 
            {
              Obj.Function RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Value v1 = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Value v2 = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.functionComposition(v1,v2); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array ::= LPAREN arrayParts RPAREN 
            {
              Obj.Array RESULT =null;

              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("array",9, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arrayParts ::= value COMMA arrayParts 
            {
              Obj.Array RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Array a = (Obj.Array)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 a.add(v); RESULT = a; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("arrayParts",10, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arrayParts ::= 
            {
              Obj.Array RESULT =null;
		 RESULT = Obj.array(); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("arrayParts",10, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= LSQUARE_BRACKET STRING RSQUARE_BRACKET 
            {
              Obj.Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.squareBracketedValue(s); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-2)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= curlyBracedValue 
            {
              Obj.Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		Obj.Value v = (Obj.Value)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= STRING 
            {
              Obj.Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.peek()).value;
		 RESULT = Obj.stringValue(s); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // curlyBracedValue ::= DOLLAR LCURLY_BRACE STRING RCURLY_BRACE 
            {
              Obj.Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-1)).value;
		 RESULT = Obj.curlyBracedValue(s); 
              CUP$ARKParser$result = parser.getSymbolFactory().newSymbol("curlyBracedValue",8, ((java_cup.runtime.Symbol)CUP$ARKParser$stack.elementAt(CUP$ARKParser$top-3)), ((java_cup.runtime.Symbol)CUP$ARKParser$stack.peek()), RESULT);
            }
          return CUP$ARKParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ARKParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ARKParser$do_action(
    int                        CUP$ARKParser$act_num,
    java_cup.runtime.lr_parser CUP$ARKParser$parser,
    java.util.Stack            CUP$ARKParser$stack,
    int                        CUP$ARKParser$top)
    throws java.lang.Exception
    {
              return CUP$ARKParser$do_action_part00000000(
                               CUP$ARKParser$act_num,
                               CUP$ARKParser$parser,
                               CUP$ARKParser$stack,
                               CUP$ARKParser$top);
    }
}

}
